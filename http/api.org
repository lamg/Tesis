* HTTP REST API specification
- HTTPS server listening in 10443
- The API prefix is ~/api~
- Correspondence between suffix, request method-body, and 
  response code-body; with the following definitions

	#+BEGIN_SRC
	AuthHeader: HTTP header with value "Auth" and JWT as value
	Credentials: JSON {"user":username, "pass":password}
	Error: JSON {"error":message}
	AccMatch: JSON {
    "dbId":DatabaseId, 
    "adId":ActiveDirectoryId, 
    "srcIN":SourceIdentityNumber, 
    "srcName":SourceName, 
    "srcDB":SourceDatabaseName,
  }
	Change: JSON {
	  "time": DateTime,
	  "srec": []AccMatch, //successfuly synchronized
		"frec": []AccMatch, //failed to synchronize
	}
	Info: JSON { 
    "name": username,
		"changeLog": []Change,
	  "matches": []AccMatch,
  }
	#+END_SRC
	
| Suffix | Request method-AuthHeader-body | Response code-AuthHeader-body |
|        |                           |                           |
|--------+---------------------------+---------------------------|
|        | <25>                      | <25>                      |
| /auth  | POST-empty-Credentials    | if ok → 200-JWT-empty   ¬ok 400-empty-error fi |
| /sync  | POST-JWT-[]AccMatch       | if ok → 200-empty-empty   ¬ok → 400-empty-error fi |
| /sync  | GET-JWT-empty             | if ok → 200-empty-Info   ¬ok → 400-empty-error fi |


- The frontend is the following multiprogram

 #+BEGIN_SRC
 var j:JWT, e:Error, i:Info;
 j, e := PostCredentialsToAuth()
 ;if e = nil → i, e := GetWithJWTToSync(j) fi
 ;if e = nil → Show(i)
   e ≠ nil → Show(e)
 fi
 #+END_SRC
 
 #+BEGIN_SRC
 con s:[]AccMatch, j:JWT;
 var e:Error;
 e := PostWithCookieToSync(j, s)
 if e ≠ nil → Show(e) fi
 #+END_SRC
 
