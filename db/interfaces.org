* Interfaces related to database management
* Calculating a paginator
r: array to be paginated
p: number of requested page
n: page size
pg: requested page
page.r.n.p: the p page of size n from r
len: get the of an array
#+BEGIN_SRC
|[
{ r:[]A,? ∧ p:Nat,? ∧ n:Nat,? ∧ pg:[]A,!}
PG
{ pg = page.r.n.p ≡ 0 ≤ p < len.(page.r.n) }
|]
#+END_SRC

The amount of pages is equivalent to the amount of groups from ~n~
elements needed to group all elements of ~r~. That can be done
calculating the ceiling of ~len.r/n~, since elements represented with
the reminder of the division also need a page.

The ~p~ page of size ~n~ from ~r~ can be obtained knowing the index
where it starts (~s~) and the index where it ends (~e~). Therefore the
program is rewritten as:

#+BEGIN_SRC
|[
{ r:[]A,? ∧ p:Nat,? ∧ n:Nat,? ∧ pg:[]A,!}
PG
{ pg = r[s:e] ≡ 0 ≤ p < ⌈len.r/n⌉ }
|]
#+END_SRC

Since

#+BEGIN_SRC
{ D ≡ ¬E }
if ¬E → { ¬E } S { L ∧ ¬M }
  E → { E } T { M ∧ ¬L }
fi
{ L ≡ ¬M }
#+END_SRC

and

#+BEGIN_SRC
{ s is page.r.n.p start index 
∧ e is page.r.n.p end index 
≡ 0 ≤ p < ⌈len.r/n⌉}
pg := r[s:e]
{ pg = r[s:e] ∧ 0 ≤ p < ⌈len.r/n⌉ }
#+END_SRC

with ~¬E ≡ 0 ≤ p < ⌈len.r/n⌉~, ~¬E ≡ ¬M~ and
~L ≡ pg = r[s:e]~

the program is rewritten
#+BEGIN_SRC
|[
{ r:[]A,? ∧ p:Nat,? ∧ n:Nat,? ∧ pg:[]A,!}
PG0
{ s is page.r.n.p start index 
∧ e is page.r.n.p end index 
≡ 0 ≤ p < ⌈len.r/n⌉ }
if 0 ≤ p < ⌈len.r/n⌉ → 
   pg := r[s:e]
	 {pg = r[s:e] ∧ 0 ≤ p < ⌈len.r/n⌉}
  ¬(0 ≤ p < ⌈len.r/n⌉) → 
   skip 
	 {pg ≠ r[s:e] ∧ ¬(0 ≤ p < ⌈len.r/n⌉)}
fi
{ pg = r[s:e] ≡ 0 ≤ p < ⌈len.r/n⌉ }
|]
#+END_SRC

Now we need

#+BEGIN_SRC
|[
{ r:[]A,? ∧ p:Nat,? ∧ n:Nat,? ∧ pg:[]A,!}
PG0
{ s is page.r.n.p start index 
∧ e is page.r.n.p end index 
≡ 0 ≤ p < ⌈len.r/n⌉ } 
|]
#+END_SRC

bound.p ≡ 0 ≤ p < ⌈len.r/n⌉
s is page.r.n.p start index ≡ s = p*n ≡ bound.p
TODO check these equivalences
e is page.r.n.p end index ≡ e = p*n + m ≡ bound.p
where m is the reminder of len.r/n if p is the last
page
cases m = 0 ∧ p is last page

Transform the problem so no backward thinking is done:
store n-group bounds of an array

#+BEGIN_SRC
|[
{}
do i < l → s.j, i, j := (i,i+n), i+n, j+1
od
if i = l → skip 
{ no group with less than n left ∧ all groups with n stored}
   i ≠ l → 
{ a group with less than n left ∧ all groups with n stored}
{ i > l ∧ (i-n,l) is not included in s}
{ no group with less than n left ∧ all groups with n stored}
fi
{ s = every.s.}
|]
#+END_SRC


